// Generated from ./grammar/Compilador.g4 by ANTLR 4.13.1
// jshint ignore: start
import antlr4 from 'antlr4';


const serializedATN = [4,0,20,131,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,
4,7,4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,
12,2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,
1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,
1,3,1,3,1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,
1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,10,1,10,1,11,1,11,1,12,4,12,
94,8,12,11,12,12,12,95,1,13,4,13,99,8,13,11,13,12,13,100,1,14,4,14,104,8,
14,11,14,12,14,105,1,15,4,15,109,8,15,11,15,12,15,110,1,15,1,15,4,15,115,
8,15,11,15,12,15,116,1,16,1,16,1,17,1,17,1,18,1,18,1,19,4,19,126,8,19,11,
19,12,19,127,1,19,1,19,0,0,20,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,
10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,1,0,3,2,0,
65,90,97,122,1,0,48,57,3,0,9,10,13,13,32,32,136,0,1,1,0,0,0,0,3,1,0,0,0,
0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,
0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,
1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,
0,39,1,0,0,0,1,41,1,0,0,0,3,45,1,0,0,0,5,49,1,0,0,0,7,53,1,0,0,0,9,63,1,
0,0,0,11,65,1,0,0,0,13,67,1,0,0,0,15,69,1,0,0,0,17,71,1,0,0,0,19,86,1,0,
0,0,21,88,1,0,0,0,23,90,1,0,0,0,25,93,1,0,0,0,27,98,1,0,0,0,29,103,1,0,0,
0,31,108,1,0,0,0,33,118,1,0,0,0,35,120,1,0,0,0,37,122,1,0,0,0,39,125,1,0,
0,0,41,42,5,101,0,0,42,43,5,110,0,0,43,44,5,116,0,0,44,2,1,0,0,0,45,46,5,
108,0,0,46,47,5,116,0,0,47,48,5,114,0,0,48,4,1,0,0,0,49,50,5,100,0,0,50,
51,5,101,0,0,51,52,5,99,0,0,52,6,1,0,0,0,53,54,5,114,0,0,54,55,5,101,0,0,
55,56,5,115,0,0,56,57,5,117,0,0,57,58,5,108,0,0,58,59,5,116,0,0,59,60,5,
97,0,0,60,61,5,100,0,0,61,62,5,111,0,0,62,8,1,0,0,0,63,64,5,42,0,0,64,10,
1,0,0,0,65,66,5,47,0,0,66,12,1,0,0,0,67,68,5,43,0,0,68,14,1,0,0,0,69,70,
5,45,0,0,70,16,1,0,0,0,71,72,5,105,0,0,72,73,5,110,0,0,73,74,5,105,0,0,74,
75,5,99,0,0,75,76,5,105,0,0,76,77,5,97,0,0,77,78,5,108,0,0,78,79,5,105,0,
0,79,80,5,122,0,0,80,81,5,97,0,0,81,82,5,99,0,0,82,83,5,105,0,0,83,84,5,
111,0,0,84,85,5,110,0,0,85,18,1,0,0,0,86,87,5,61,0,0,87,20,1,0,0,0,88,89,
5,123,0,0,89,22,1,0,0,0,90,91,5,125,0,0,91,24,1,0,0,0,92,94,7,0,0,0,93,92,
1,0,0,0,94,95,1,0,0,0,95,93,1,0,0,0,95,96,1,0,0,0,96,26,1,0,0,0,97,99,7,
1,0,0,98,97,1,0,0,0,99,100,1,0,0,0,100,98,1,0,0,0,100,101,1,0,0,0,101,28,
1,0,0,0,102,104,7,0,0,0,103,102,1,0,0,0,104,105,1,0,0,0,105,103,1,0,0,0,
105,106,1,0,0,0,106,30,1,0,0,0,107,109,7,1,0,0,108,107,1,0,0,0,109,110,1,
0,0,0,110,108,1,0,0,0,110,111,1,0,0,0,111,112,1,0,0,0,112,114,5,46,0,0,113,
115,7,1,0,0,114,113,1,0,0,0,115,116,1,0,0,0,116,114,1,0,0,0,116,117,1,0,
0,0,117,32,1,0,0,0,118,119,5,59,0,0,119,34,1,0,0,0,120,121,5,40,0,0,121,
36,1,0,0,0,122,123,5,41,0,0,123,38,1,0,0,0,124,126,7,2,0,0,125,124,1,0,0,
0,126,127,1,0,0,0,127,125,1,0,0,0,127,128,1,0,0,0,128,129,1,0,0,0,129,130,
6,19,0,0,130,40,1,0,0,0,7,0,95,100,105,110,116,127,1,6,0,0];


const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );

export default class CompiladorLexer extends antlr4.Lexer {

    static grammarFileName = "Compilador.g4";
    static channelNames = [ "DEFAULT_TOKEN_CHANNEL", "HIDDEN" ];
	static modeNames = [ "DEFAULT_MODE" ];
	static literalNames = [ null, "'ent'", "'ltr'", "'dec'", "'resultado'", 
                         "'*'", "'/'", "'+'", "'-'", "'inicializacion'", 
                         "'='", "'{'", "'}'", null, null, null, null, "';'", 
                         "'('", "')'" ];
	static symbolicNames = [ null, "ENT", "LTR", "DEC", "PRINTF", "MUL", "DIV", 
                          "ADD", "SUB", "INICIALIZACION", "ASIGNACION", 
                          "LLAVE_I", "LLAVE_F", "ID", "INT", "CHAR", "FLOAT", 
                          "SEMI", "IPAREN", "DPARENT", "WS" ];
	static ruleNames = [ "ENT", "LTR", "DEC", "PRINTF", "MUL", "DIV", "ADD", 
                      "SUB", "INICIALIZACION", "ASIGNACION", "LLAVE_I", 
                      "LLAVE_F", "ID", "INT", "CHAR", "FLOAT", "SEMI", "IPAREN", 
                      "DPARENT", "WS" ];

    constructor(input) {
        super(input)
        this._interp = new antlr4.atn.LexerATNSimulator(this, atn, decisionsToDFA, new antlr4.atn.PredictionContextCache());
    }
}

CompiladorLexer.EOF = antlr4.Token.EOF;
CompiladorLexer.ENT = 1;
CompiladorLexer.LTR = 2;
CompiladorLexer.DEC = 3;
CompiladorLexer.PRINTF = 4;
CompiladorLexer.MUL = 5;
CompiladorLexer.DIV = 6;
CompiladorLexer.ADD = 7;
CompiladorLexer.SUB = 8;
CompiladorLexer.INICIALIZACION = 9;
CompiladorLexer.ASIGNACION = 10;
CompiladorLexer.LLAVE_I = 11;
CompiladorLexer.LLAVE_F = 12;
CompiladorLexer.ID = 13;
CompiladorLexer.INT = 14;
CompiladorLexer.CHAR = 15;
CompiladorLexer.FLOAT = 16;
CompiladorLexer.SEMI = 17;
CompiladorLexer.IPAREN = 18;
CompiladorLexer.DPARENT = 19;
CompiladorLexer.WS = 20;



